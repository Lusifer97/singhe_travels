<?phpclass User_Login_Controller extends Controller{    function __construct()    {        parent::__construct();    }    function login()    {        //        var_dump(Hash::create('whirlpool', 'Fj5nmND3BTZ94sB', SALT));        $data = array(            'username' => [$_POST[LOGIN_CONFIG['USERNAME']['FIELD']], 'is_empty'],            'password' => [$_POST[LOGIN_CONFIG['PASSWORD']['FIELD']], 'is_empty']        );                $errors = $this->validation->form_validate($data);        if (empty($errors)) {            //            //            $data = $this->model->by_username($_POST['username']);            $result = $this->model->login($_POST[LOGIN_CONFIG['USERNAME']['FIELD']]);            $data = $result;            //            var_dump($data);            if ($data != NULL) {                $try = $data[0]['try'] + 1;                if ($data[0]['try'] < LOGIN_CONFIG['MAX_TRY']) {                    if (isset($result[0][LOGIN_CONFIG['PASSWORD']['COLUMN']]) && $result[0][LOGIN_CONFIG['PASSWORD']['COLUMN']] == Hash::create(LOGIN_CONFIG['HASH_ALGORITHM'], $_POST[LOGIN_CONFIG['PASSWORD']['FIELD']], LOGIN_CONFIG['HASH_SALT'])) {                        $login_token = rand(100000, 999999); //lgout fuc                        $result2 = $this->model->set_login_token($result[0]['id'], $login_token); //TOKEN AND RESET TRY                        if ($result2) {                            Session::set(LOGIN_CONFIG['AUTH_PREFIX'] . 'adminid', $this->hash->encrypt($result[0]['id']));                            Session::set(LOGIN_CONFIG['AUTH_PREFIX'] . 'adminlogin_token', $this->hash->encrypt($login_token));                            echo json_encode(array('has_errors' => FALSE, 'status' => TRUE));                            //                    header('Location: ' . URL_Admin . 'dashboard/');                        } else { //TOKEN SET=====                            echo json_encode(array('has_errors' => FALSE, 'status' => FALSE, 'message' => LOGIN_CONFIG['ERROR_MESSAGE']['TOKEN_SET']));                        }                    } else { //ISSET PASS CHECK====                        $result2 = $this->model->update_try($result[0]['id'], $try); //UPDATE TRY IF WRONG PASS                         if ($try == LOGIN_CONFIG['MAX_TRY']) {                            $result = $this->model->deactivate($result[0]['id']); //DEACTIVE IF TRY exceeded                            echo json_encode(array('has_errors' => FALSE, 'status' => FALSE, 'message' => LOGIN_CONFIG['ERROR_MESSAGE']['DEACTIVATE']));                        } else {                            echo json_encode(array('has_errors' => FALSE, 'status' => FALSE, 'message' => LOGIN_CONFIG['ERROR_MESSAGE']['MISMATCH']));                        }                    }                } else { //MAX_TRY=====                    //                    $result = $this->model->update_try($result[0]['id'], $try); //UPDATE TRY IF WRONG PASS DEACTIVE                    //                    if ($result) {                    echo json_encode(array('has_errors' => FALSE, 'status' => FALSE, 'message' => LOGIN_CONFIG['ERROR_MESSAGE']['TRY_EXCEED']));                    //                    }                }            } else { //NULL=====                echo json_encode(array('has_errors' => FALSE, 'status' => FALSE, 'message' => LOGIN_CONFIG['ERROR_MESSAGE']['DATA_NULL']));            }            //        } else { //ERRORS======            echo json_encode(array('has_errors' => TRUE, 'errors' => $errors));        }    }    function logout()    {        $result = $this->model->logout(Hash::decrypt(Session::get(LOGIN_CONFIG['AUTH_PREFIX'] . 'adminid')));        Session::unset_session(LOGIN_CONFIG['AUTH_PREFIX'] . 'adminid');        Session::unset_session(LOGIN_CONFIG['AUTH_PREFIX'] . 'adminlogin_token');        header('Location: ' . URL_Admin . "");    }}